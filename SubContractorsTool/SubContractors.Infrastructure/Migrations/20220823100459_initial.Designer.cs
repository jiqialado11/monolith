// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubContractors.Infrastructure.Persistence.EfCore;

#nullable disable

namespace SubContractors.Infrastructure.Migrations
{
    [DbContext(typeof(SubContractorsDbContext))]
    [Migration("20220823100459_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AddendumProject", b =>
                {
                    b.Property<int>("AddendaId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddendaId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("AddendumProject");
                });

            modelBuilder.Entity("AddendumStaff", b =>
                {
                    b.Property<int>("AddendaId")
                        .HasColumnType("int");

                    b.Property<int>("StaffsId")
                        .HasColumnType("int");

                    b.HasKey("AddendaId", "StaffsId");

                    b.HasIndex("StaffsId");

                    b.ToTable("AddendumStaff");
                });

            modelBuilder.Entity("MarketSubContractor", b =>
                {
                    b.Property<int>("MarketsId")
                        .HasColumnType("int");

                    b.Property<int>("SubContractorsId")
                        .HasColumnType("int");

                    b.HasKey("MarketsId", "SubContractorsId");

                    b.HasIndex("SubContractorsId");

                    b.ToTable("MarketSubContractor", "subcontractors");
                });

            modelBuilder.Entity("project.ProjectStaff", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StaffsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "StaffsId");

                    b.HasIndex("StaffsId");

                    b.ToTable("ProjectStaff");
                });

            modelBuilder.Entity("ProjectSubContractor", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubContractorsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "SubContractorsId");

                    b.HasIndex("SubContractorsId");

                    b.ToTable("ProjectSubContractor");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Addendum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AgreementId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRateForNonBillableProjects")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("Addendum", "agreements");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BudgetOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetOfficeId");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SubContractorId");

                    b.ToTable("Agreement", "agreements");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddendumId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RateValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddendumId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UnitId");

                    b.ToTable("Rate", "agreements");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.RateUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RateUnit", "agreements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Value = "per/hour"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Value = "per/day"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Value = "per/week"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Value = "per/month"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Value = "per/year"
                        });
                });

            modelBuilder.Entity("SubContractors.Domain.Budget.BudgetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BudgetGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFunction")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentBudgetGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentBudgetGroupId");

                    b.ToTable("BudgetGroup", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BudgetGroupName = "abC.Finance",
                            EmailAddress = "dataart.abC.Finance@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 2,
                            BudgetGroupName = "abC.Travel",
                            EmailAddress = "dataart.abC.Travel@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 3,
                            BudgetGroupName = "abC.Media",
                            EmailAddress = "dataart.abC.Media@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 4,
                            BudgetGroupName = "abC.Telecom",
                            EmailAddress = "dataart.abC.Telecom@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 5,
                            BudgetGroupName = "abC.Healthcare",
                            EmailAddress = "dataart.abC.Healthcare@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 6,
                            BudgetGroupName = "abC.IoT",
                            EmailAddress = "dataart.abC.DeviceHiveGroup@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 7,
                            BudgetGroupName = "abC.GeneralDelivery",
                            EmailAddress = "dataart.abC.DigitalTransformation@dataart.com",
                            IsActive = true,
                            IsDefault = true,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 8,
                            BudgetGroupName = "abC.BrandManagement",
                            EmailAddress = "dataart.abC.BrandManagement@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 9,
                            BudgetGroupName = "abC.iGaming",
                            EmailAddress = "dataart.abC.iGaming@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 34
                        },
                        new
                        {
                            Id = 10,
                            BudgetGroupName = "abC.Function.HRM",
                            EmailAddress = "dataart.abC.HRM@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 11,
                            BudgetGroupName = "abC.Function.ITServices",
                            EmailAddress = "dataart.abC.ITServices@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 12,
                            BudgetGroupName = "abC.Sustainability",
                            EmailAddress = "dataart.abC.Ethnoexpert@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 13,
                            BudgetGroupName = "abC.Function.DesignStudio",
                            EmailAddress = "dataart.abC.DesignStudio@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 14,
                            BudgetGroupName = "abC.SolutionDesign",
                            EmailAddress = "dataart.abC.SolutionDesign@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 20
                        },
                        new
                        {
                            Id = 15,
                            BudgetGroupName = "abC.Blockchain",
                            EmailAddress = "dataart.abC.Blockchain@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 20
                        },
                        new
                        {
                            Id = 16,
                            BudgetGroupName = "abC.Function.ALF",
                            EmailAddress = "dataart.abC.Accounting@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 17,
                            BudgetGroupName = "abC.Function.CorporateTravel",
                            EmailAddress = "dataart.abC.CorporateTravel@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 18,
                            BudgetGroupName = "abC.Function.OBI",
                            EmailAddress = "dataart.abC.OBI@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 19,
                            BudgetGroupName = "abC.Function.CG",
                            EmailAddress = "dataart.abc.CG@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 20,
                            BudgetGroupName = "abC.Function.AM",
                            EmailAddress = "dataart.abc.AM@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 21,
                            BudgetGroupName = "abC.Function.RM",
                            EmailAddress = "dataart.abc.ResourceMng@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 22,
                            BudgetGroupName = "abC.Function.SI",
                            EmailAddress = "dataart.abc.SI@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 23,
                            BudgetGroupName = "abC.Function.Null",
                            EmailAddress = "dataart.abc.ResourceMng@dataart.com",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 24,
                            BudgetGroupName = "abC.Function.Compliance",
                            EmailAddress = "dataart.abc.Compliance@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 25,
                            BudgetGroupName = "abC.Function.SER",
                            EmailAddress = "dataart.abc.SER@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 32,
                            BudgetGroupName = "DataArt",
                            EmailAddress = "",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false
                        },
                        new
                        {
                            Id = 33,
                            BudgetGroupName = "Functions",
                            EmailAddress = "",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 32
                        },
                        new
                        {
                            Id = 34,
                            BudgetGroupName = "Practices",
                            EmailAddress = "",
                            IsActive = false,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 32
                        },
                        new
                        {
                            Id = 35,
                            BudgetGroupName = "abC.Finance.Enterprise",
                            EmailAddress = "dataart.abC.Finance@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 1
                        },
                        new
                        {
                            Id = 36,
                            BudgetGroupName = "abC.Finance.US",
                            EmailAddress = "dataart.abC.Finance@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 1
                        },
                        new
                        {
                            Id = 37,
                            BudgetGroupName = "abC.Finance.UK",
                            EmailAddress = "dataart.abC.Finance@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 1
                        },
                        new
                        {
                            Id = 38,
                            BudgetGroupName = "abC.Finance.EMEA",
                            EmailAddress = "dataart.abC.Finance@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 1
                        },
                        new
                        {
                            Id = 39,
                            BudgetGroupName = "abC.Function.BPA",
                            EmailAddress = "dataart.abC.BPA@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 40,
                            BudgetGroupName = "abC.Function.LD",
                            EmailAddress = "dataart.abc.LD@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = true,
                            ParentBudgetGroupId = 33
                        },
                        new
                        {
                            Id = 41,
                            BudgetGroupName = "abC.Retail",
                            EmailAddress = "dataart.abC.DigitalTransformation@dataart.com",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            IsFunction = false,
                            ParentBudgetGroupId = 7
                        });
                });

            modelBuilder.Entity("SubContractors.Domain.Budget.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BudgetSystemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", "budget");
                });

            modelBuilder.Entity("SubContractors.Domain.Budget.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerm", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Value = "NoRestriction"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Value = "AfterClientPayOnly"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Value = "AfterClientPayOnlyOrExpirationDate"
                        });
                });

            modelBuilder.Entity("SubContractors.Domain.Check.BackgroundCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<int>("CheckStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubContractorId");

                    b.ToTable("BackgroundCheck", "checks");
                });

            modelBuilder.Entity("SubContractors.Domain.Check.SanctionCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<int>("CheckStatus")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubContractorId");

                    b.ToTable("SanctionCheck", "checks");
                });

            modelBuilder.Entity("SubContractors.Domain.Common.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BudgetSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency", "common");
                });

            modelBuilder.Entity("SubContractors.Domain.Common.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultCurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnsite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProduction")
                        .HasColumnType("bit");

                    b.Property<int?>("LeaderPMID")
                        .HasColumnType("int");

                    b.Property<int?>("MdpId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimezoneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location", "common");
                });

            modelBuilder.Entity("SubContractors.Domain.Compliance.Compliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.HasIndex("SubContractorId");

                    b.ToTable("Compliance", "compliance");
                });

            modelBuilder.Entity("SubContractors.Domain.Compliance.ComplianceFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ComplianceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceId")
                        .IsUnique()
                        .HasFilter("[ComplianceId] IS NOT NULL");

                    b.ToTable("ComplianceFile", "compliance");
                });

            modelBuilder.Entity("SubContractors.Domain.Compliance.ComplianceRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComplianceRating", "compliance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The level of conformance with DataArt information security, compliance and legal requirements is good. Subcontractor may be engaged into client’s projects with the consideration of specific client’s requirements.",
                            IsDeleted = false,
                            Value = "A"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The level of conformance with DataArt information security, compliance and legal requirements is sufficient. Subcontractor may be engaged into client’s projects without being provided with privileged access rights (e.g. access to production). Additional internal discussion may be required depending on the scope of the planned services.",
                            IsDeleted = false,
                            Value = "B"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The level of conformance with DataArt information security, compliance and legal requirements is insufficient. Subcontractor may be engaged into client’s projects only after additional internal discussion and applying necessary security controls.",
                            IsDeleted = false,
                            Value = "C"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The level of conformance with information security, compliance and legal requirements is insufficient as they are not applicable to the nature of subcontractor’s business. Subcontractor may be engaged into non-client facing projects (e.g. internal, consultancy).",
                            IsDeleted = false,
                            Value = "D"
                        });
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.BudgetInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BudgedRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetInvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetRequestStatus")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedPaidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BudgedInfo", "invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddendumId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BudgedInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InvoiceFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUseInvoiceDateForBudget")
                        .HasColumnType("bit");

                    b.Property<int?>("MilestoneId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReferralId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddendumId");

                    b.HasIndex("BudgedInfoId")
                        .IsUnique()
                        .HasFilter("[BudgedInfoId] IS NOT NULL");

                    b.HasIndex("InvoiceFileId");

                    b.HasIndex("MilestoneId")
                        .IsUnique()
                        .HasFilter("[MilestoneId] IS NOT NULL");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReferralId");

                    b.HasIndex("SubContractorId");

                    b.ToTable("Invoice", "invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PmId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Milestone", "invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.SupportingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("SupportingDocumentation", "invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BudgetGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceApproverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PmId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetGroupId");

                    b.HasIndex("DeliveryManagerId");

                    b.HasIndex("InvoiceApproverId");

                    b.HasIndex("ProjectGroupId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Project", "project");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DeliveryManagerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryManagerId");

                    b.ToTable("ProjectGroup", "project");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Note", "tasks");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EffortsSpent")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstimatedEfforts")
                        .HasColumnType("int");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKarmaTimeSheetsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSiteTask")
                        .HasColumnType("bit");

                    b.Property<bool>("PMOrDMCanEdit")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SummaryTime")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<int>("TaskType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("Task", "tasks");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.TimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentTimeSheetId")
                        .HasColumnType("int");

                    b.Property<int>("SpentTimeHours")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSheetType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTimeSheetId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TaskId");

                    b.ToTable("TimeSheet", "tasks");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.LegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressInLocalLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadPositionEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadPositionLocalLanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LegalRegistrationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdpId")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LegalEntity", "subcontractors");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Market", "subcontractors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Ukraine"
                        });
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Office", "subcontractors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "sample sales office",
                            OfficeType = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "sample development office",
                            OfficeType = 2
                        });
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Staff.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BudgetOfficeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CannotLoginAfter")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CannotLoginBefore")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNdaSigned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PmId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetOfficeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TaskId");

                    b.ToTable("Staff", "staff");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.SubContractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccountManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNDASigned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInteractionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Materials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MdpId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubContractorStatus")
                        .HasColumnType("int");

                    b.Property<int>("SubContractorType")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("LocationId");

                    b.ToTable("SubContractor", "subcontractors");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Tax.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubContractorId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Tax", "tax");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Tax.TaxType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxType", "tax");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            IsDeleted = false,
                            Name = "W9"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            IsDeleted = false,
                            Name = "W-8BEN"
                        });
                });

            modelBuilder.Entity("subcontractors.OfficeSubContractor", b =>
                {
                    b.Property<int>("OfficesId")
                        .HasColumnType("int");

                    b.Property<int>("SubContractorsId")
                        .HasColumnType("int");

                    b.HasKey("OfficesId", "SubContractorsId");

                    b.HasIndex("SubContractorsId");

                    b.ToTable("OfficeSubContractor", "subcontractors");
                });

            modelBuilder.Entity("subcontractors.StaffSubContractor", b =>
                {
                    b.Property<int>("StaffsId")
                        .HasColumnType("int");

                    b.Property<int>("SubContractorsId")
                        .HasColumnType("int");

                    b.HasKey("StaffsId", "SubContractorsId");

                    b.HasIndex("SubContractorsId");

                    b.ToTable("StaffSubContractor");
                });

            modelBuilder.Entity("AddendumProject", b =>
                {
                    b.HasOne("SubContractors.Domain.Agreement.Addendum", null)
                        .WithMany()
                        .HasForeignKey("AddendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.Project.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddendumStaff", b =>
                {
                    b.HasOne("SubContractors.Domain.Agreement.Addendum", null)
                        .WithMany()
                        .HasForeignKey("AddendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketSubContractor", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Market", null)
                        .WithMany()
                        .HasForeignKey("MarketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", null)
                        .WithMany()
                        .HasForeignKey("SubContractorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project.ProjectStaff", b =>
                {
                    b.HasOne("SubContractors.Domain.Project.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectSubContractor", b =>
                {
                    b.HasOne("SubContractors.Domain.Project.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", null)
                        .WithMany()
                        .HasForeignKey("SubContractorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Addendum", b =>
                {
                    b.HasOne("SubContractors.Domain.Agreement.Agreement", "Agreement")
                        .WithMany("Addenda")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SubContractors.Domain.Common.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SubContractors.Domain.Budget.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.Navigation("Agreement");

                    b.Navigation("Currency");

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Agreement", b =>
                {
                    b.HasOne("SubContractors.Domain.Common.Location", "BudgetOffice")
                        .WithMany()
                        .HasForeignKey("BudgetOfficeId");

                    b.HasOne("SubContractors.Domain.SubContractor.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityId");

                    b.HasOne("SubContractors.Domain.Budget.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", "SubContractor")
                        .WithMany("Agreements")
                        .HasForeignKey("SubContractorId");

                    b.Navigation("BudgetOffice");

                    b.Navigation("LegalEntity");

                    b.Navigation("PaymentMethod");

                    b.Navigation("SubContractor");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Rate", b =>
                {
                    b.HasOne("SubContractors.Domain.Agreement.Addendum", "Addendum")
                        .WithMany("Rates")
                        .HasForeignKey("AddendumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SubContractors.Domain.Project.Project", null)
                        .WithMany("Rates")
                        .HasForeignKey("ProjectId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Staff")
                        .WithMany("Rates")
                        .HasForeignKey("StaffId");

                    b.HasOne("SubContractors.Domain.Agreement.RateUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Addendum");

                    b.Navigation("Staff");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SubContractors.Domain.Budget.BudgetGroup", b =>
                {
                    b.HasOne("SubContractors.Domain.Budget.BudgetGroup", "ParentBudgetGroup")
                        .WithMany()
                        .HasForeignKey("ParentBudgetGroupId");

                    b.Navigation("ParentBudgetGroup");
                });

            modelBuilder.Entity("SubContractors.Domain.Check.BackgroundCheck", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Staff")
                        .WithMany("BackgroundChecks")
                        .HasForeignKey("StaffId");

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", null)
                        .WithMany("BackgroundChecks")
                        .HasForeignKey("SubContractorId");

                    b.Navigation("Approver");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SubContractors.Domain.Check.SanctionCheck", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Staff")
                        .WithMany("SanctionChecks")
                        .HasForeignKey("StaffId");

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", "SubContractor")
                        .WithMany("SanctionChecks")
                        .HasForeignKey("SubContractorId");

                    b.Navigation("Approver");

                    b.Navigation("Staff");

                    b.Navigation("SubContractor");
                });

            modelBuilder.Entity("SubContractors.Domain.Compliance.Compliance", b =>
                {
                    b.HasOne("SubContractors.Domain.Compliance.ComplianceRating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", "SubContractor")
                        .WithMany("Compliances")
                        .HasForeignKey("SubContractorId");

                    b.Navigation("Rating");

                    b.Navigation("SubContractor");
                });

            modelBuilder.Entity("SubContractors.Domain.Compliance.ComplianceFile", b =>
                {
                    b.HasOne("SubContractors.Domain.Compliance.Compliance", "Compliance")
                        .WithOne("File")
                        .HasForeignKey("SubContractors.Domain.Compliance.ComplianceFile", "ComplianceId");

                    b.Navigation("Compliance");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.Invoice", b =>
                {
                    b.HasOne("SubContractors.Domain.Agreement.Addendum", "Addendum")
                        .WithMany("Invoices")
                        .HasForeignKey("AddendumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SubContractors.Domain.Invoice.BudgetInfo", "BudgedInfo")
                        .WithOne("Invoice")
                        .HasForeignKey("SubContractors.Domain.Invoice.Invoice", "BudgedInfoId");

                    b.HasOne("SubContractors.Domain.Invoice.SupportingDocument", "InvoiceFile")
                        .WithMany()
                        .HasForeignKey("InvoiceFileId");

                    b.HasOne("SubContractors.Domain.Invoice.Milestone", "MileStone")
                        .WithOne("Invoice")
                        .HasForeignKey("SubContractors.Domain.Invoice.Invoice", "MilestoneId");

                    b.HasOne("SubContractors.Domain.Project.Project", "Project")
                        .WithMany("Invoices")
                        .HasForeignKey("ProjectId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Referral")
                        .WithMany("Invoices")
                        .HasForeignKey("ReferralId");

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", "SubContractor")
                        .WithMany("Invoices")
                        .HasForeignKey("SubContractorId");

                    b.Navigation("Addendum");

                    b.Navigation("BudgedInfo");

                    b.Navigation("InvoiceFile");

                    b.Navigation("MileStone");

                    b.Navigation("Project");

                    b.Navigation("Referral");

                    b.Navigation("SubContractor");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.SupportingDocument", b =>
                {
                    b.HasOne("SubContractors.Domain.Invoice.Invoice", "Invoice")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Project", b =>
                {
                    b.HasOne("SubContractors.Domain.Budget.BudgetGroup", "BudgetGroup")
                        .WithMany("Projects")
                        .HasForeignKey("BudgetGroupId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "DeliveryManager")
                        .WithMany()
                        .HasForeignKey("DeliveryManagerId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "InvoiceApprover")
                        .WithMany()
                        .HasForeignKey("InvoiceApproverId");

                    b.HasOne("SubContractors.Domain.Project.ProjectGroup", "ProjectGroup")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectGroupId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.Navigation("BudgetGroup");

                    b.Navigation("DeliveryManager");

                    b.Navigation("InvoiceApprover");

                    b.Navigation("ProjectGroup");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.ProjectGroup", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "DeliveryManager")
                        .WithMany()
                        .HasForeignKey("DeliveryManagerId");

                    b.Navigation("DeliveryManager");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.Note", b =>
                {
                    b.HasOne("SubContractors.Domain.Project.Task.Task", "Task")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.Task", b =>
                {
                    b.HasOne("SubContractors.Domain.Project.Task.Task", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("SubContractors.Domain.Project.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.TimeSheet", b =>
                {
                    b.HasOne("SubContractors.Domain.Project.Task.TimeSheet", "ParentTimeSheet")
                        .WithMany()
                        .HasForeignKey("ParentTimeSheetId");

                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("SubContractors.Domain.Project.Task.Task", "Task")
                        .WithMany("TimeSheets")
                        .HasForeignKey("TaskId");

                    b.Navigation("ParentTimeSheet");

                    b.Navigation("Staff");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Staff.Staff", b =>
                {
                    b.HasOne("SubContractors.Domain.Common.Location", "BudgetOffice")
                        .WithMany()
                        .HasForeignKey("BudgetOfficeId");

                    b.HasOne("SubContractors.Domain.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SubContractors.Domain.Project.Task.Task", null)
                        .WithMany("Staffs")
                        .HasForeignKey("TaskId");

                    b.Navigation("BudgetOffice");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.SubContractor", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerId");

                    b.HasOne("SubContractors.Domain.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("AccountManager");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Tax.Tax", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", "SubContractor")
                        .WithMany("Taxes")
                        .HasForeignKey("SubContractorId");

                    b.HasOne("SubContractors.Domain.SubContractor.Tax.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId");

                    b.Navigation("SubContractor");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("subcontractors.OfficeSubContractor", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", null)
                        .WithMany()
                        .HasForeignKey("SubContractorsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("subcontractors.StaffSubContractor", b =>
                {
                    b.HasOne("SubContractors.Domain.SubContractor.Staff.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SubContractors.Domain.SubContractor.SubContractor", null)
                        .WithMany()
                        .HasForeignKey("SubContractorsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Addendum", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("SubContractors.Domain.Agreement.Agreement", b =>
                {
                    b.Navigation("Addenda");
                });

            modelBuilder.Entity("SubContractors.Domain.Budget.BudgetGroup", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SubContractors.Domain.Compliance.Compliance", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.BudgetInfo", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.Invoice", b =>
                {
                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("SubContractors.Domain.Invoice.Milestone", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Project", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Rates");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.ProjectGroup", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SubContractors.Domain.Project.Task.Task", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Staffs");

                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.Staff.Staff", b =>
                {
                    b.Navigation("BackgroundChecks");

                    b.Navigation("Invoices");

                    b.Navigation("Rates");

                    b.Navigation("SanctionChecks");
                });

            modelBuilder.Entity("SubContractors.Domain.SubContractor.SubContractor", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("BackgroundChecks");

                    b.Navigation("Compliances");

                    b.Navigation("Invoices");

                    b.Navigation("SanctionChecks");

                    b.Navigation("Taxes");
                });
#pragma warning restore 612, 618
        }
    }
}
